
#
# Automake targets
#

bin_PROGRAMS = unicc$(EXEEXT)

if WITH_BOOTSTRAP
noinst_PROGRAMS = boot_min_lalr1$(EXEEXT) \
					unicc_boot1$(EXEEXT) \
					unicc_boot2$(EXEEXT) \
					unicc_boot3$(EXEEXT)
endif

man1_MANS = unicc.1.man

uniccdir = $(datadir)/unicc
tltdir = $(uniccdir)/tlt
dist_tlt_DATA = tlt/C.tlt 
dist_unicc_DATA = unicc.dtd LICENSE README.md

AM_CPPFLAGS = -DTLTDIR=\"$(tltdir)\"

#
# All sources except the grammar parser are equal in all bootstrappers.
#

SOURCES			= 	\
				p_mem.c \
				p_error.c \
				p_first.c \
				p_lalr_gen.c \
				p_util.c \
				p_string.c \
				p_integrity.c \
				p_virtual.c \
				p_rewrite.c \
				p_debug.c \
				p_keywords.c \
				p_list.c \
				p_build.c \
				p_xml.c \
				p_main.c \
				xml.c

if WITH_BOOTSTRAP

BUILT_SOURCES	=	\
				p_parse_boot1.c \
				p_parse_boot2.c \
				p_parse_boot2.h \
				p_parse_boot3.c \
				p_parse_boot3.h

# --- UniCC Bootstrap phase 0 --------------------------------------------------
#
# First we need to compile min_lalr1, which is a stand-alone parser generator
# that was written for experimental reasons before UniCC, but is needed by
# UniCC to bootstrap.
#

boot_min_lalr1_SOURCES = min_lalr1/min_lalr1.c

# --- UniCC Bootstrap phase 1 --------------------------------------------------
#
# This phase uses the experimental min_lalr1 Parser Generator to build a
# rudimentary parser for UniCC. min_lalr1 must be installed and in the PATH.
#

unicc_boot1_SOURCES = p_parse_boot1.c $(SOURCES)
unicc_boot1_CFLAGS = -DUNICC_BOOTSTRAP=1

p_parse_boot1.c: p_parse.syn boot_min_lalr1$(EXEEXT)
	./boot_min_lalr1$(EXEEXT) p_parse.syn >$@ 2>/dev/null

# --- UniCC Bootstrap phase 2 --------------------------------------------------
#
# In this phase, the parser generated by min_lalr1 is will be used to parse the
# grammar definition of the UniCC parser (p_parse.par)
#

unicc_boot2_SOURCES = p_parse_boot2.c $(SOURCES)
unicc_boot2_CFLAGS = -DUNICC_BOOTSTRAP=2
#unicc_boot2_DEPENDENCIES = unicc_boot1$(EXEEXT)

p_parse_boot2.c p_parse_boot2.h: p_parse.par unicc_boot1$(EXEEXT)
	./unicc_boot1$(EXEEXT) -svwb p_parse_boot2 p_parse.par

# --- UniCC Bootstrap phase 3 --------------------------------------------------
#
# In this phase, the UniCC parser compiled by UniCC will be used to build
# itself.
#

unicc_boot3_SOURCES = p_parse_boot3.c $(SOURCES)
unicc_boot3_CFLAGS = -DUNICC_BOOTSTRAP=3
#unicc_boot3_DEPENDENCIES = unicc_boot2$(EXEEXT)

p_parse_boot3.c p_parse_boot3.h: p_parse.par unicc_boot2$(EXEEXT)
	./unicc_boot2$(EXEEXT) -svwb p_parse_boot3 p_parse.par

endif

# --- UniCC Final Build --------------------------------------------------------
#
# Using the third bootstrap phase, the final UniCC executable is built.
#

unicc_SOURCES = p_parse.c $(SOURCES)
#unicc_DEPENDENCIES = unicc_boot3$(EXEEXT)

if WITH_BOOTSTRAP
p_parse.c p_parse.h: p_parse.par unicc_boot3$(EXEEXT)
	./unicc_boot3$(EXEEXT) -svwb p_parse p_parse.par
endif

