<parser unicc-version="0.27.15dev" mode="sensitive" source="test.par" basename="test" target-language="C" char-min="0" char-max="65534">
	<option name="unicc4c:ast" line="14">^1</option>
	<option name="unicc4c:ast-prefix" line="15">ast</option>
	<option name="unicc4c:ast-execmode" line="16">top-down</option>
	<option name="ast:expression" line="18" />
	<option name="ast:expression&gt;binary" line="19">
	ast:%abstract;
	ast:expression	expr1;
	ast:expression	expr2;
</option>
	<option name="ast:expression&gt;unary" line="26"> 
	ast:%abstract;
	ast:expression	expr;
</option>
	<option name="ast:expression&gt;int" line="32">
	int				value;
</option>
	<option name="ast:binary&gt;assign" line="37" />
	<option name="ast:binary&gt;plus" line="38" />
	<option name="ast:binary&gt;minus" line="39" />
	<option name="ast:binary&gt;multiply" line="40" />
	<option name="ast:binary&gt;divide" line="41" />
	<option name="ast:binary&gt;times" line="42" />
	<option name="ast:unary&gt;negative" line="43" />
	<symbols>
		<symbol type="terminal" id="0" name="string" terminal-type="regular-expression" value-type="uchar" value-type-id="0" defined-at="45">
			<dfa>
				<state id="0">
					<transition goto="2">
						<character-class count="1">
							<range from="34" to="34" />
						</character-class>
					</transition>
				</state>
				<state id="1" accept="0" default-transition="3">
					<transition goto="1">
						<character-class count="1">
							<range from="34" to="34" />
						</character-class>
					</transition>
					<transition goto="3">
						<character-class count="65534">
							<range from="0" to="33" />
							<range from="35" to="65534" />
						</character-class>
					</transition>
				</state>
				<state id="2" default-transition="3">
					<transition goto="3">
						<character-class count="65534">
							<range from="0" to="33" />
							<range from="35" to="65534" />
						</character-class>
					</transition>
					<transition goto="1">
						<character-class count="1">
							<range from="34" to="34" />
						</character-class>
					</transition>
				</state>
				<state id="3" default-transition="3">
					<transition goto="1">
						<character-class count="1">
							<range from="34" to="34" />
						</character-class>
					</transition>
					<transition goto="3">
						<character-class count="65534">
							<range from="0" to="33" />
							<range from="35" to="65534" />
						</character-class>
					</transition>
				</state>
			</dfa>
		</symbol>
		<symbol type="terminal" id="1" name="integer" terminal-type="regular-expression" value-type="int" value-type-id="1" defined-at="50">
			<dfa>
				<state id="0">
					<transition goto="1">
						<character-class count="10">
							<range from="48" to="57" />
						</character-class>
					</transition>
				</state>
				<state id="1" accept="1">
					<transition goto="1">
						<character-class count="10">
							<range from="48" to="57" />
						</character-class>
					</transition>
				</state>
			</dfa>
			<code defined-at="51">
				<raw>
					</raw>
				<return-value value-type="int" value-type-id="1" />
				<raw> = atoi( </raw>
				<begin-of-match />
				<raw> );
				</raw>
			</code>
		</symbol>
		<symbol type="terminal" id="2" name="=" terminal-type="character-class">
			<character-class count="1">
				<range from="61" to="61" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="3" name="+" terminal-type="character-class">
			<character-class count="1">
				<range from="43" to="43" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="4" name="-" terminal-type="character-class">
			<character-class count="1">
				<range from="45" to="45" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="5" name="*" terminal-type="character-class">
			<character-class count="1">
				<range from="42" to="42" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="6" name="/" terminal-type="character-class">
			<character-class count="1">
				<range from="47" to="47" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="7" name="!" terminal-type="character-class">
			<character-class count="1">
				<range from="33" to="33" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="8" name="^" terminal-type="character-class">
			<character-class count="1">
				<range from="94" to="94" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="9" name=";" terminal-type="character-class">
			<character-class count="1">
				<range from="59" to="59" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="10" name="(" terminal-type="character-class">
			<character-class count="1">
				<range from="40" to="40" />
			</character-class>
		</symbol>
		<symbol type="terminal" id="11" name=")" terminal-type="character-class">
			<character-class count="1">
				<range from="41" to="41" />
			</character-class>
		</symbol>
		<symbol type="non-terminal" id="12" name="test" defined-at="55" />
		<symbol type="non-terminal" id="13" name="expr" value-type="ast" value-type-id="2" defined-at="58" />
	</symbols>
	<productions>
		<production id="0" length="2" defined-at="55">
			<left-hand-side symbol-id="12" offset="0" />
			<right-hand-side symbol-id="13" offset="0" named="expr" />
			<right-hand-side symbol-id="9" offset="1" />
		</production>
		<production id="1" length="3" defined-at="58">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="13" offset="0" named="expr1" />
			<right-hand-side symbol-id="2" offset="1" />
			<right-hand-side symbol-id="13" offset="2" named="expr2" />
			<option name="ast:assign" line="59" />
		</production>
		<production id="2" length="3" defined-at="65">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="13" offset="0" named="expr1" />
			<right-hand-side symbol-id="3" offset="1" />
			<right-hand-side symbol-id="13" offset="2" named="expr2" />
			<option name="ast:plus" line="66" />
		</production>
		<production id="3" length="3" defined-at="68">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="13" offset="0" named="expr1" />
			<right-hand-side symbol-id="4" offset="1" />
			<right-hand-side symbol-id="13" offset="2" named="expr2" />
			<option name="ast:minus" line="69" />
		</production>
		<production id="4" length="3" defined-at="71">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="13" offset="0" named="expr1" />
			<right-hand-side symbol-id="5" offset="1" />
			<right-hand-side symbol-id="13" offset="2" named="expr2" />
			<option name="ast:multiply" line="72" />
		</production>
		<production id="5" length="3" defined-at="74">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="13" offset="0" named="expr1" />
			<right-hand-side symbol-id="6" offset="1" />
			<right-hand-side symbol-id="13" offset="2" named="expr2" />
			<option name="ast:divide" line="75" />
		</production>
		<production id="6" length="3" defined-at="77">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="13" offset="0" named="expr1" />
			<right-hand-side symbol-id="8" offset="1" />
			<right-hand-side symbol-id="13" offset="2" named="expr2" />
			<option name="ast:times" line="78" />
		</production>
		<production id="7" length="2" defined-at="80">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="7" offset="0" />
			<right-hand-side symbol-id="13" offset="1" named="expr" />
			<option name="ast:negative" line="81"> return !value; </option>
		</production>
		<production id="8" length="3" defined-at="84">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="10" offset="0" />
			<right-hand-side symbol-id="13" offset="1" named="expr" />
			<right-hand-side symbol-id="11" offset="2" />
			<code defined-at="85">
				<raw> </raw>
				<variable target="left-hand-side" value-type="ast" value-type-id="2" />
				<raw> = </raw>
				<variable target="right-hand-side" offset="1" value-type="ast" value-type-id="2" />
				<raw>; </raw>
			</code>
		</production>
		<production id="9" length="1" defined-at="87">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="1" offset="0" named="value" />
			<option name="ast:int" line="89" />
		</production>
		<production id="10" length="1" defined-at="91">
			<left-hand-side symbol-id="13" offset="0" />
			<right-hand-side symbol-id="0" offset="0" named="string" />
			<option name="ast:int" line="100">
						printf( "In my past, I was a string..." );
					</option>
			<code defined-at="101">
				<raw> 	int ast_value;
						ast_value = atoi( </raw>
				<variable target="right-hand-side" offset="0" value-type="uchar" value-type-id="0" />
				<raw> );
					</raw>
			</code>
		</production>
	</productions>
	<states>
		<state id="0" lexer="0">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="2" />
		</state>
		<state id="1" lexer="0" derived-from-state="0">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="4" />
		</state>
		<state id="2" lexer="1" derived-from-state="0">
			<shift symbol-id="2" to-state="5" />
			<shift symbol-id="3" to-state="6" />
			<shift symbol-id="4" to-state="7" />
			<shift symbol-id="5" to-state="8" />
			<shift symbol-id="6" to-state="9" />
			<shift symbol-id="8" to-state="10" />
			<shift-reduce symbol-id="9" by-production="0" />
		</state>
		<state id="3" lexer="0" derived-from-state="0">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="11" />
		</state>
		<state id="4" default-production="7" lexer="2" derived-from-state="1">
			<shift symbol-id="8" to-state="10" />
		</state>
		<state id="5" lexer="0" derived-from-state="2">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="12" />
		</state>
		<state id="6" lexer="0" derived-from-state="2">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="13" />
		</state>
		<state id="7" lexer="0" derived-from-state="2">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="14" />
		</state>
		<state id="8" lexer="0" derived-from-state="2">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="15" />
		</state>
		<state id="9" lexer="0" derived-from-state="2">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="16" />
		</state>
		<state id="10" lexer="0" derived-from-state="2">
			<shift symbol-id="7" to-state="1" />
			<shift-reduce symbol-id="0" by-production="10" />
			<shift-reduce symbol-id="1" by-production="9" />
			<shift symbol-id="10" to-state="3" />
			<goto symbol-id="13" to-state="17" />
		</state>
		<state id="11" lexer="3" derived-from-state="3">
			<shift symbol-id="2" to-state="5" />
			<shift symbol-id="3" to-state="6" />
			<shift symbol-id="4" to-state="7" />
			<shift symbol-id="5" to-state="8" />
			<shift symbol-id="6" to-state="9" />
			<shift symbol-id="8" to-state="10" />
			<shift-reduce symbol-id="11" by-production="8" />
		</state>
		<state id="12" default-production="1" lexer="2" derived-from-state="5">
			<error symbol-id="2" />
			<shift symbol-id="3" to-state="6" />
			<shift symbol-id="4" to-state="7" />
			<shift symbol-id="5" to-state="8" />
			<shift symbol-id="6" to-state="9" />
			<shift symbol-id="8" to-state="10" />
		</state>
		<state id="13" default-production="2" lexer="2" derived-from-state="6">
			<shift symbol-id="5" to-state="8" />
			<shift symbol-id="6" to-state="9" />
			<shift symbol-id="8" to-state="10" />
		</state>
		<state id="14" default-production="3" lexer="2" derived-from-state="7">
			<shift symbol-id="5" to-state="8" />
			<shift symbol-id="6" to-state="9" />
			<shift symbol-id="8" to-state="10" />
		</state>
		<state id="15" default-production="4" lexer="2" derived-from-state="8">
			<shift symbol-id="8" to-state="10" />
		</state>
		<state id="16" default-production="5" lexer="2" derived-from-state="9">
			<shift symbol-id="8" to-state="10" />
		</state>
		<state id="17" default-production="6" lexer="2" derived-from-state="10">
			<shift symbol-id="8" to-state="10" />
		</state>
	</states>
	<lexers>
		<lexer id="0">
			<state id="0">
				<transition goto="1">
					<character-class count="1">
						<range from="33" to="33" />
					</character-class>
				</transition>
				<transition goto="5">
					<character-class count="1">
						<range from="34" to="34" />
					</character-class>
				</transition>
				<transition goto="2">
					<character-class count="10">
						<range from="48" to="57" />
					</character-class>
				</transition>
				<transition goto="3">
					<character-class count="1">
						<range from="40" to="40" />
					</character-class>
				</transition>
			</state>
			<state id="1" accept="7" />
			<state id="2" accept="1">
				<transition goto="2">
					<character-class count="10">
						<range from="48" to="57" />
					</character-class>
				</transition>
			</state>
			<state id="3" accept="10" />
			<state id="4" accept="0" default-transition="6">
				<transition goto="4">
					<character-class count="1">
						<range from="34" to="34" />
					</character-class>
				</transition>
				<transition goto="6">
					<character-class count="65534">
						<range from="0" to="33" />
						<range from="35" to="65534" />
					</character-class>
				</transition>
			</state>
			<state id="5" default-transition="6">
				<transition goto="6">
					<character-class count="65534">
						<range from="0" to="33" />
						<range from="35" to="65534" />
					</character-class>
				</transition>
				<transition goto="4">
					<character-class count="1">
						<range from="34" to="34" />
					</character-class>
				</transition>
			</state>
			<state id="6" default-transition="6">
				<transition goto="4">
					<character-class count="1">
						<range from="34" to="34" />
					</character-class>
				</transition>
				<transition goto="6">
					<character-class count="65534">
						<range from="0" to="33" />
						<range from="35" to="65534" />
					</character-class>
				</transition>
			</state>
		</lexer>
		<lexer id="1">
			<state id="0">
				<transition goto="1">
					<character-class count="1">
						<range from="61" to="61" />
					</character-class>
				</transition>
				<transition goto="2">
					<character-class count="1">
						<range from="43" to="43" />
					</character-class>
				</transition>
				<transition goto="3">
					<character-class count="1">
						<range from="45" to="45" />
					</character-class>
				</transition>
				<transition goto="4">
					<character-class count="1">
						<range from="42" to="42" />
					</character-class>
				</transition>
				<transition goto="5">
					<character-class count="1">
						<range from="47" to="47" />
					</character-class>
				</transition>
				<transition goto="6">
					<character-class count="1">
						<range from="94" to="94" />
					</character-class>
				</transition>
				<transition goto="7">
					<character-class count="1">
						<range from="59" to="59" />
					</character-class>
				</transition>
			</state>
			<state id="1" accept="2" />
			<state id="2" accept="3" />
			<state id="3" accept="4" />
			<state id="4" accept="5" />
			<state id="5" accept="6" />
			<state id="6" accept="8" />
			<state id="7" accept="9" />
		</lexer>
		<lexer id="2">
			<state id="0">
				<transition goto="1">
					<character-class count="1">
						<range from="61" to="61" />
					</character-class>
				</transition>
				<transition goto="2">
					<character-class count="1">
						<range from="43" to="43" />
					</character-class>
				</transition>
				<transition goto="3">
					<character-class count="1">
						<range from="45" to="45" />
					</character-class>
				</transition>
				<transition goto="4">
					<character-class count="1">
						<range from="42" to="42" />
					</character-class>
				</transition>
				<transition goto="5">
					<character-class count="1">
						<range from="47" to="47" />
					</character-class>
				</transition>
				<transition goto="6">
					<character-class count="1">
						<range from="94" to="94" />
					</character-class>
				</transition>
				<transition goto="7">
					<character-class count="1">
						<range from="59" to="59" />
					</character-class>
				</transition>
				<transition goto="8">
					<character-class count="1">
						<range from="41" to="41" />
					</character-class>
				</transition>
			</state>
			<state id="1" accept="2" />
			<state id="2" accept="3" />
			<state id="3" accept="4" />
			<state id="4" accept="5" />
			<state id="5" accept="6" />
			<state id="6" accept="8" />
			<state id="7" accept="9" />
			<state id="8" accept="11" />
		</lexer>
		<lexer id="3">
			<state id="0">
				<transition goto="1">
					<character-class count="1">
						<range from="61" to="61" />
					</character-class>
				</transition>
				<transition goto="2">
					<character-class count="1">
						<range from="43" to="43" />
					</character-class>
				</transition>
				<transition goto="3">
					<character-class count="1">
						<range from="45" to="45" />
					</character-class>
				</transition>
				<transition goto="4">
					<character-class count="1">
						<range from="42" to="42" />
					</character-class>
				</transition>
				<transition goto="5">
					<character-class count="1">
						<range from="47" to="47" />
					</character-class>
				</transition>
				<transition goto="6">
					<character-class count="1">
						<range from="94" to="94" />
					</character-class>
				</transition>
				<transition goto="7">
					<character-class count="1">
						<range from="41" to="41" />
					</character-class>
				</transition>
			</state>
			<state id="1" accept="2" />
			<state id="2" accept="3" />
			<state id="3" accept="4" />
			<state id="4" accept="5" />
			<state id="5" accept="6" />
			<state id="6" accept="8" />
			<state id="7" accept="11" />
		</lexer>
	</lexers>
	<value-types>
		<value-type id="0" c_name="uchar">uchar</value-type>
		<value-type id="1" c_name="int">int</value-type>
		<value-type id="2" c_name="ast">ast</value-type>
	</value-types>
	<prologue />
	<epilogue />
	<pcb />
	<source>/*
	This is an example of a UniCC4C Abstract Syntax Tree 
	and UniCC parser definition in one file.
*/

#!language 				"C";

#nonassoc				'=' ;
#left					'+' '-' ;
#left					'*' '/' ;
#right					'!' ;
#right					'^' ;

#unicc4c:ast			on;
#unicc4c:ast-prefix		"ast";
#unicc4c:ast-execmode	"top-down";

#ast:expression ;
#ast:expression&gt;binary
[*
	ast:%abstract;
	ast:expression	expr1;
	ast:expression	expr2;
*];

#ast:expression&gt;unary
[* 
	ast:%abstract;
	ast:expression	expr;
*];

#ast:expression&gt;int
[*
	int				value;
*];

#ast:binary&gt;assign ;
#ast:binary&gt;plus ;
#ast:binary&gt;minus ;
#ast:binary&gt;multiply ;
#ast:binary&gt;divide ;
#ast:binary&gt;times ;
#ast:unary&gt;negative ;

@string&lt;uchar&gt;	'"' .* '"' ;
				[*
					@@ = pasprintf( "%.*s", @&lt; - @&gt; - 2, @&gt; );
				*]

@integer&lt;int&gt;	'0-9'+ 
				[*
					@@ = atoi( @&gt; );
				*];

test$			-&gt; expr ';'
				;

expr&lt;ast&gt;		-&gt; expr:expr1 '=' expr:expr2
					#ast:assign
					/*
						Node member assignment is done via 
						right-hand side identifiers...
					*/

				|  expr:expr1 '+' expr:expr2
					#ast:plus

				|  expr:expr1 '-' expr:expr2
					#ast:minus

				|  expr:expr1 '*' expr:expr2
					#ast:multiply

				|  expr:expr1 '/' expr:expr2
					#ast:divide

				|  expr:expr1 '^' expr:expr2
					#ast:times

				|  '!' expr
					#ast:negative	
					[* return !value; *]

				|  '(' expr ')'
					[* @@ = @2; *]

				|  @integer:value

					#ast:int

				|	@string

					/*
						Conversion is done this way (example...)
					*/
					[* 	int ast_value;
						ast_value = atoi( @string );
					*]

					#ast:int
					[*
						printf( "In my past, I was a string..." );
					*]

				;

</source>
</parser>
