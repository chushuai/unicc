<!--
	Hi Folks!

	This file is a relict from a very eary parser template. It was adapted
	from the beginning of the Standard C Parser Template and was a test for
	another programming language, in this case JavaScript. This template was
	not tended in further versions of UniCC, nor was it really tested. 
	But it could be used as base for a real JavaScript parser template
	somewhere in the future.
-->
<?xml version="1.0" standalone="yes"?>
<generator name="JavaScript">
	<vstack_def_type></vstack_def_type>
	<vstack_term_type></vstack_term_type>	
	<action_start>&#x09;&#x09;&#x09;&#x09;case @@production-number:&#x09;&#x09;&#x09;&#x09;{&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;</action_start>
	<action_end>&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x09;&#x09;&#x09;&#x09;break;&#x0A;&#x0A;</action_end>
	<action_single>(vstack[ vstack.length - 1 - @@offset ])</action_single>
	<action_union>(vstack[ vstack.length - 1 - @@offset ])</action_union>
	<action_lhs_single>ret</action_lhs_single>
	<action_lhs_union>ret</action_lhs_union>
	<vstack_single></vstack_single>
	<vstack_union_start></vstack_union_start>
	<vstack_union_end></vstack_union_end>
	<vstack_union_def></vstack_union_def>
	<vstack_union_att></vstack_union_att>
	<prodlen>
		<col>@@length-of-rhs</col>
		<col_sep>, </col_sep>
	</prodlen>
	<prodlhs>
		<col>@@lhs</col>
		<col_sep>, </col_sep>
	</prodlhs>
	<charmap>
		<col>@@symbol</col>
		<col_sep>, </col_sep>
	</charmap>
	<kw_select>
		<col>@@machine</col>
		<col_sep>, </col_sep>
	</kw_select>
	<kw_char>
		<col>@@code</col>
		<col_sep>, </col_sep>
	</kw_char>
	<kw_trans>
		<col>@@goto</col>
		<col_sep>, </col_sep>
	</kw_trans>
	<acttab>
		<row_start>&#x09;new Array( </row_start>
		<row_end> )</row_end>
		<row_sep>,&#x0A;</row_sep>
		<col>@@symbol,@@action,@@index</col>
		<col_sep> , </col_sep>
	</acttab>
	<gotab>
		<row_start>&#x09;new Array( </row_start>
		<row_end> )</row_end>
		<row_sep>,&#x0A;</row_sep>
		<col>@@symbol,@@index</col>
		<col_sep> , </col_sep>
	</gotab>
	<kw_idx>
		<row_start>&#x09;new Array( </row_start>
		<row_end> )</row_end>
		<row_sep>,&#x0A;</row_sep>
		<col>@@index</col>
		<col_sep>, </col_sep>
	</kw_idx>
	<kw_accept>
		<row_start>&#x09;new Array( </row_start>
		<row_end> )</row_end>
		<row_sep>,&#x0A;</row_sep>
		<col>@@accept</col>
		<col_sep>, </col_sep>
	</kw_accept>
	<driver>/*
 * Parser:		@@name
 * Version:		@@version
 * Copyright:	@@copyright
 * Description:	@@description
 *
 *
 * Generated by the Phorward LALR(1) Parser Generator
 * Copyright (C) by Phorward Software Technologies, Jan Max Meyer
 */

var @@prefix_act = new Array(
@@action-table );

var @@prefix_go = new Array(
@@goto-table );

var @@prefix_prod_lengths = new Array( @@production-lengths );

var @@prefix_prod_lhs = new Array( @@production-lhs );

var @@prefix_kw_select = new Array( @@keyword-select );

var @@prefix_kw_idx = new Array(
@@keyword-index );

var @@prefix_kw_chars = new Array( @@keyword-char );

var @@prefix_kw_trans = new Array( @@keyword-trans );

var @@prefix_kw_accept = new Array(
@@keyword-accept );

var @@prefix_char_map = new Array( @@character-map );

function @@prefix_tabcol()
{
	var act;
	var idx;
}

function @@prefix_get_act_tab( state, sym, col )
{
	var i;

	for( i = 0; i &lt; @@prefix_act[state].length; i += 3 )
	{
		if( @@prefix_act[state][i] == sym )
		{
			col.act = @@prefix_act[state][i+1];
			col.idx = @@prefix_act[state][i+2];
			return true;
		}
	}
	
	return false;
}

function @@prefix_get_go_tab( state, sym, col )
{
	var i;

	for( i = 0; i &lt; @@prefix_go[state].length; i += 2 )
	{
		if( @@prefix_go[state][i] == sym )
		{
			col.act = 0;
			col.idx = @@prefix_go[state][i+1];
			return true;
		}
	}
	
	return false;
}

function @@prefix_parse( src )
{
	var		stack		= new Array();
	var		vstack		= new Array();
	var		ret;
	var		sym;
	var		len;
	var		i;
	var		pos			= 0;
	var		col			= new @@prefix_tabcol();
	
	stack.push( 0 );
	vstack.push( 0 );
	
	while( true )
	{
		sym = -1;
		len = 0;
		
		if( @@number-of-dfa-machines )
		{
			if( @@prefix_kw_select[ stack[ stack.length - 1 ] ] &gt; -1 )
			{
				var kw_st = 0;
				var	chr;
				
				len = 0;
				
				do
				{
					chr = @@prefix_kw_idx[ @@prefix_kw_select[ stack[ stack.length - 1 ] ] ][ kw_st ];
					
					kw_st = -1;
					while( @@prefix_kw_chars[ chr ] &gt; -1 )
					{
						if( @@prefix_kw_chars[ chr ] == src.charCodeAt( pos + len ) )
						{
							kw_st = @@prefix_kw_trans[ chr ];
	
							if( @@prefix_kw_accept[ @@prefix_kw_select[ stack[ stack.length - 1 ] ] ][ kw_st ] &gt; -1 )
								sym = @@prefix_kw_accept[ @@prefix_kw_select[ stack[ stack.length - 1 ] ] ][ kw_st ];

							len++;
							break;
						}
						chr++;
					}
				}
				while( kw_st &gt; -1 );
			}
		}
		
		if( sym == -1 )
		{
			if( pos &gt;= src.length )
				pos = src.length - 1;

			sym = @@prefix_char_map[ src.charCodeAt( pos ) ];
			len = 1;
		}
		
		WScript.Echo( "tos = " + stack[ stack.length - 1 ] + "x = " + src.charCodeAt( pos )  + " " + pos + " " + src.length +  "sym = " + sym + " len = " + len + " src = &gt;" + src.substr( pos, src.length ) + "&lt;" );

		if( !@@prefix_get_act_tab( stack[ stack.length - 1 ], sym, col ) )
		{
			WScript.Echo( "Parse error at " + src.substr( pos, src.length ) );
			return false;
		}
		
		/* Shift */
		if( col.act & 2 )
		{
			stack.push( ( col.act & 1 ) ? 0 : col.idx );
			vstack.push( src.charAt( pos ) );
			
			pos += len;
		}

		/* Reduce */
		if( col.act & 1 )
		{			
			ret = 0;

			switch( col.idx )
			{
@@actions
			}
			
			if( !col.idx )
				break;
				
			for( i = 0; i &lt; @@prefix_prod_lengths[ col.idx ]; i++ )
			{
				stack.pop();
				vstack.pop();
			}

			@@prefix_get_go_tab( stack[ stack.length - 1 ], @@prefix_prod_lhs[ col.idx ], col );

			stack.push( col.idx );
			vstack.push( ret );
		}
	}

	return true;
}


var s = WScript.StdIn.ReadLine();
@@prefix_parse( s );
</driver>
</generator>
