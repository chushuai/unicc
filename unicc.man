.TH "UniCC" 1 "September 2011" "UniCC 1.0"


.SH NAME

.P
unicc \- The universal LALR(1) Parser Generator

.SH SYNOPSIS

.P
unicc [OPTION]... FILE

.SH DESCRIPTION

.P
UniCC, standing as an acronym for Universal Compiler\-Compiler, is a powerful
LALR(1) Parser Generator and Development System for computer professionals.
Its design\-goal is to serve as an all\-round design and build tool for any
parsing\-related issue, including production\-quality compiler construction and
the implementation of domains specific languages.

.P
UniCC unions an integrated generator for lexical analyzers and a powerful
LALR(1) parser generator into one software solution.
The programming interface is a rich, extendable and innovative EBNF\-based
grammar definition language, which gives any compiler\-developer's task much
more comfort and simplicity in implementing parsers than ever before. It comes
with useful features for both grammar prototyping and design, parser
optimization, semantic augmentation and parser programming. Lexical symbols can
be directly defined within productions, right\-hand side items can be referenced
by meaningful names within semantic actions, instead of only their offsets.
Features like virtual\- and embedded\-productions finally help to rapidly build\-up
iterative and optional grammatical structures.

.P
Standard features like automatic conflict resolution, terminal and production
precedence association, state compression as well as parser trace and behavior
modification trough semantic actions round up the whole system.

.P
UniCC is technically a target language independent parser generator, which
means that it is not bound to a special programming language. Currently, only
support of the C programming language is given due the UniCC Standard C Parser
Template. More standard templates for other languages like C++ and Java will be
developed and released in future by Phorward Software Technologies, but are not
available for now; Any help and support on this area is appreciated.

.P
UniCC has been developed since 2006 and has its origin at Phorward Software
Technologies and is initially written and maintained by its 1985 born core
developer, Jan Max Meyer. Phorward Software Technologies is a software company
from Dortmund, Germany, which focuses its business on compiler construction,
scripting languages and software development tools, both in the area of open
source and proprietary solutions.

.P
This document should serve as a quick reference note on how to use UniCC and
set up its environment. There is also additional documentation in form of a
User's Manual available, which is included into the binary packages of UniCC
and can be obtained from the Phorward Software Technologies website.

.P
Please check out http://unicc.phorward\-software.com/ from time to time to get
the latest news, documentation, updates and support on the UniCC LALR(1) Parser
Generator.

.SH FEATURES

.P
The UniCC LALR(1) Parser Generator features the following, unique tools and
possibilities.

.RS
.IP \(bu 3
A powerful and inovative BNF\-based grammar definition language
.IP \(bu 3
Full Unicode support
.IP \(bu 3
Build\-in lexical analyzer generator
.IP \(bu 3
Grammar prototyping features
.IP \(bu 3
Virtual productions
.IP \(bu 3
Anonymous nonterminals
.IP \(bu 3
Semantically determined symbols
.IP \(bu 3
Two parser construction modes allow the use of different algorithmic
approaches relating the whitespace handling
.IP \(bu 3
Target\-language independent parser development
.IP \(bu 3
Template\-based program\-module generator and XML\-based parser description
file generator
.IP \(bu 3
Platform\-independent (console\-based)
.IP \(bu 3
Standard LALR(1) conflict resolution
.IP \(bu 3
Supporting the C programming language via the UniCC Standard C Parser
Template, providing many useful features like integrated Syntax Tree
Generator and Error Recovery
.IP \(bu 3
More target language templates for Java and C++ are planned in near future
.RE

.SH ENVIRONMENT SETUP

.P
To get UniCC work properly, the \fBunicc\fR executable must be in the PATH.
It is also required to set an environment variable UNICC_TPLDIR that directs
to a directory holding the UniCC target language templates.

.SH COMMAND-LINE OPTIONS

.P
The UniCC command\-line interface supports various, combinable options to
invoke, modify and specialize the parser generation process, or to trigger
further tasks.

.P
\-a, \-\-all\-warnings

.RS
Runs UniCC to print all warnings that come up with the grammar. UniCC
normaly supresses some warning messages that raise up during the parse
table constructions according to their importance. 
.RE

.P
\-b \fINAME\fR, \-\-basename \fINAME\fR

.RS
Defines the specified basename \fINAME\fR to be used for the output
file(s) instead of the one derived by the #prefix\-directive or by the
name of the input filename. This basename is used for all output files
if the provided parser template causes the construction of multiple
files. 
.RE

.P
\-G, \-\-grammar

.RS
Dumps an overview of the finally constructred grammar to stderr, right
before the parse\-tables are generated. 
.RE

.P
\-h, \-\-help 

.RS
Prints a short overview about the command\-line options and exists.
.RE

.P
\-V, \-\-version

.RS
Prints copyright and version information and exits.
.RE

.P
\-n, \-\-no\-opt

.RS
Disables state optimization; By default, the resulting LALR(1) parse
states are optimized during table construction by introducing a special
SHIFT_REDUCE action which combines a shift and reduction, which is
possible when the last symbol of a production is shifted. Standard
LALR(1) parsers only support SHIFT or REDUCE, not both operations at the
same time. When this option is used, UniCC produces about 20\-30% more
LALR(1) states. 
.RE

.P
\-P, \-\-production

.RS
Dumps an overview about the finally produced productions and their
semantic actions. 
.RE

.P
\-s, \-\-stats

.RS
Prints a statistics message to stderr when parser generation has
entirely been finished.
.RE

.P
\-S, \-\-states

.RS
Dumps the generated LALR(1) states that had been generated during the
parse table generation process. 
.RE

.P
\-T, \-\-symbols

.RS
Dumps an overview of all used symbols. 
.RE

.P
\-v, \-\-verbose

.RS
Prints process messages about the specific tasks during parser generation
process. 
.RE

.P
\-w, \-\-warnings

.RS
Print relevant warnings. 
.RE

.P
\-x, \-\-xml

.RS
Triggers UniCC to run the parser description file generator additionally
to the program module generator. The parser description file generator
outputs an XML\-based parser representation of the generated parse tables,
which can be used by third\-party code generators or grammar analsys and
debugging tools. 
.RE

.P
\-X, \-\-XML

.RS
Triggers UniCC to only run the parser description file generator
without running the program\-module generator.
.RE

.P
Errors and warnings are printed to STDERR, any other kind of output to STDOUT.

.SH BUILDING UNICC FROM SOURCE

.P
UniCC is a product that was entirely established and developed on top of the
Phorward Foundation Libraries (to be more exactly, many parts of the Phorward
Foundation Libraries have their origin in earlier development stages of the
UniCC Parser Generator, but where moved into libraries for usage outside
UniCC).

.P
The Phorward Foundation Libraries are the development environment of Phorward
Software Technologies, and provides a build\-environment, toolchain and library
toolkit that will be used by several projects created by Phorward Software
Technologies.

.P
The Phorward Foundation Libraries are released under the BSD License, more
information can be obtained from http://phorward.phorward\-software.com.

.P
Before you can build UniCC, ensure that you have installed the Phorward
Foundation Libraries in their latest version.

.P
Get the latest version using the Mercurial SCM with

.nf
hg clone http://phorward.hg.sourceforge.net:8000/hgroot/phorward/phorward 
.fi


.P
then, change into the cloned directory and run

.nf
run/psetup
.fi


.P
follow the instructions on the screen.
Run

.nf
\&. ./psh
.fi


.P
when finished. Congratulations, you setup the Phorward Foundation Libraries
on your system.

.P
When this is done, move to the $PHOME/src directory of your Phorward Foundation
Libraries installation by simply typing

.nf
s
.fi


.P
and clone the following repositories. They provide the UniCC LALR(1) Parser
Generator, the UniCC Standard C Parser Template and XPL, a demonstration of
a tiny programming language implementation written with UniCC.

.nf
hg clone http://unicc.hg.sourceforge.net:8000/hgroot/unicc/unicc
hg clone http://unicc.hg.sourceforge.net:8000/hgroot/unicc/Cparser
hg clone http://unicc.hg.sourceforge.net:8000/hgroot/unicc/xpl
.fi


.P
Then, run

.nf
echo "export UNICC_TPLDIR=$PHOME/src/Cparser" >>$PHOME/etc/userenv
chmod +x $PHOME/etc/userenv
\&. $PHOME/etc/userenv
.fi


.P
on the console. This will create a permanent user\-defined environment script
that is applied the next time you setup the Phorward Foundation Libraries
environment, and also updates the current environment to get the variable
UNICC_TPLDIR known.

.P
After this, run

.nf
echo "pbasis pregex pstring min_lalr1 Cparser unicc xpl" >makeall-seq
.fi


.P
This will create an extended build\-sequence for the makeall script, which is
part of the Phorward Foundation Libraries.

.P
Finally compile all modules by simply typing

.nf
make
.fi


.P
After a successful build, UniCC can be invoked with

.nf
unicc
.fi


.P
and is available in $PHOME/run.

.SH AUTHOR

.P
The UniCC LALR(1) Parser Generator and the UniCC Standard C Parser Template is
written and maintained by Jan Max Meyer, Phorward Software Technologies.

.SH COPYRIGHT

.P
Copyright (C) 2006\-2011 by Phorward Software Technologies, Jan Max Meyer

.P
You may use, modify and distribute this software under the terms and conditions
of the Artistic License, version 2. Please see LICENSE for more information.

.P
The full license terms can be obtained from the file LICENSE, provided
with both the source and binary packages of UniCC.

.\" man code generated by txt2tags 2.6 (http://txt2tags.org)
.\" cmdline: txt2tags -t man unicc.t2t
