UniCC LALR(1) Parser Generator
Version 1.1.1
Oct 2017
%!postproc(md): '```(.?)' '```\1'
%!postproc(md): '^	([^-$])' '\1'
%!postproc(md): '^ \* ' '- '
%!postproc(md): '^  \* ' '  - '
%!postproc(man): '```.?' ''
%!postproc(man): '\[!.*\)' ''

= NAME =

**unicc** - target-language independent parser generator.

= SYNOPSIS =

unicc [OPTION]... FILE

= ABOUT =

UniCC is a parser generator. It compiles an augmented grammar definition into
a program source code. Because UniCC is intended to be a target-language
independent parser generator, it can be configured via template definition files
to emit parser programs in probably any programming language.

= COMMAND-LINE OPTIONS =

The UniCC command-line interface supports various, combinable options to
invoke, modify and specialize the parser generation process, or to trigger
further tasks.

== -a, --all-warnings ==

Runs UniCC to print all warnings that come up with the grammar. UniCC
normaly supresses some warning messages that raise up during the parse
table constructions according to their importance.

== -b NAME, --basename NAME ==

Defines the specified basename //NAME// to be used for the output
file(s) instead of the one derived by the #prefix-directive or by the
name of the input filename. This basename is used for all output files
if the provided parser template causes the construction of multiple
files.

== -G, --grammar ==

Dumps an overview of the finally constructred grammar to stderr, right
before the parse-tables are generated.

== -h, --help ==

Prints a short overview about the command-line options and exists.

== -n, --no-opt ==

Disables state optimization; By default, the resulting LALR(1) parse
states are optimized during table construction by introducing a special
SHIFT_REDUCE action which combines a shift and reduction, which is
possible when the last symbol of a production is shifted. Standard
LALR(1) parsers only support SHIFT or REDUCE, not both operations at the
same time. When this option is used, UniCC produces about 20-30% more
LALR(1) states.

== -P, --production ==

Dumps an overview about the finally produced productions and their
semantic actions.

== -s, --stats ==

Prints a statistics message to stderr when parser generation has
entirely been finished. This will automatically switched on when
using the verbose option.

== -S, --states ==

Dumps the generated LALR(1) states that had been generated during the
parse table generation process.

== -t, --stdout ==

Print all code generator output to stdout instead as files.

== -T, --symbols ==

Dumps an overview of all used symbols.

== -v, --verbose ==

Prints process messages about the specific tasks during parser generation
process. Automatically switches on the stats option for statistics output.

== -V, --version ==

Prints copyright and version information and exits.

== -w, --warnings ==

Print relevant warnings.

== -x, --xml ==

Triggers UniCC to run the parser description file generator additionally
to the program module generator. The parser description file generator
outputs an XML-based parser representation of the generated parse tables,
which can be used by third-party code generators or grammar analsys and
debugging tools.

== -X, --XML ==
Triggers UniCC to only run the parser description file generator
without running the program-module generator.

Errors and warnings are printed to STDERR, any other kind of output to STDOUT.


= BUILDING UNICC FROM SOURCE =

UniCC is a software that was entirely established and developed on top of the
Phorward Toolkit.

The Phorward Toolkit and its library //libphorward// provide many useful
functions for general purpose and extended software-development tasks,
including standard data structures, a system-independent interface, extending
data types and regular expression management functions, required by UniCC to
construct the lexical analyzers.

The Phorward Toolkit is released under the BSD License. More information can
be obtained from the official product website at http://phorward-software.com.

Before UniCC can be built, ensure that the Phorward Toolkit is installed in
its latest version.

Getting the latest version is simple using the Mercurial SCM with

``` git clone https://github.com/phorward/phorward.git

then, change into the cloned directory and run

```
./configure
make
make install
```

After that, clone the following repositories. They provide the UniCC Parser
Generator and XPL, a demonstration of a tiny programming language implementation
written with UniCC.

```
git clone https://github.com/phorward/unicc.git
git clone https://github.com/phorward/xpl.git
```

Optionally, if hacking the UniCC Standard C Parser Template is wanted, clone

``` git clone https://github.com/phorward/Cparser.git

also.

Change into the directory ``unicc`` and, again run

```
./configure
make
make install
```

After UniCC was successfully built and installed, ``xpl`` can be compiled
out of the box without any configuration script.

If the UniCC bootstrapping toolchain is wanted, configure UniCC with

``` ./configure --with-bootstrap

this will bootstrap the UniCC grammar parser with multiple generation states.


= AUTHOR =

The UniCC LALR(1) Parser Generator and all subsequent repositories and tools is
written and maintained by Jan Max Meyer, Phorward Software Technologies.

Some other projects by the author are:

- //pynetree// (http://pynetree.org): A light-weight parsing toolkit written in pure Python.
- //phorward// (http://phorward.phorward-software.com): A free toolkit for parser development, lexical analysis, regular expressions and more.
- //JS/CC// (http://jscc.brobston.com): The JavaScript parser generator.


= COPYRIGHT =

Copyright (C) 2006-2017 by Phorward Software Technologies, Jan Max Meyer.

You may use, modify and distribute this software under the terms and conditions of the 3-clause BSD license. The full license terms can be obtained from the file LICENSE.

